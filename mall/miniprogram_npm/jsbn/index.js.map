{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["(function(){\r\n\r\n    // Copyright (c) 2005  Tom Wu\r\n    // All Rights Reserved.\r\n    // See \"LICENSE\" for details.\r\n\r\n    // Basic JavaScript BN library - subset useful for RSA encryption.\r\n\r\n    // Bits per digit\r\n    var dbits;\r\n\r\n    // JavaScript engine analysis\r\n    var canary = 0xdeadbeefcafe;\r\n    var j_lm = ((canary&0xffffff)==0xefcafe);\r\n\r\n    // (public) Constructor\r\n    function BigInteger(a,b,c) {\r\n      if(a != null)\r\n        if(\"number\" == typeof a) this.fromNumber(a,b,c);\r\n        else if(b == null && \"string\" != typeof a) this.fromString(a,256);\r\n        else this.fromString(a,b);\r\n    }\r\n\r\n    // return new, unset BigInteger\r\n    function nbi() { return new BigInteger(null); }\r\n\r\n    // am: Compute w_j += (x*this_i), propagate carries,\r\n    // c is initial carry, returns final carry.\r\n    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\r\n    // We need to select the fastest one that works in this environment.\r\n\r\n    // am1: use a single mult and divide to get the high bits,\r\n    // max digit bits should be 26 because\r\n    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\r\n    function am1(i,x,w,j,c,n) {\r\n      while(--n >= 0) {\r\n        var v = x*this[i++]+w[j]+c;\r\n        c = Math.floor(v/0x4000000);\r\n        w[j++] = v&0x3ffffff;\r\n      }\r\n      return c;\r\n    }\r\n    // am2 avoids a big mult-and-extract completely.\r\n    // Max digit bits should be <= 30 because we do bitwise ops\r\n    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\r\n    function am2(i,x,w,j,c,n) {\r\n      var xl = x&0x7fff, xh = x>>15;\r\n      while(--n >= 0) {\r\n        var l = this[i]&0x7fff;\r\n        var h = this[i++]>>15;\r\n        var m = xh*l+h*xl;\r\n        l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);\r\n        c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\r\n        w[j++] = l&0x3fffffff;\r\n      }\r\n      return c;\r\n    }\r\n    // Alternately, set max digit bits to 28 since some\r\n    // browsers slow down when dealing with 32-bit numbers.\r\n    function am3(i,x,w,j,c,n) {\r\n      var xl = x&0x3fff, xh = x>>14;\r\n      while(--n >= 0) {\r\n        var l = this[i]&0x3fff;\r\n        var h = this[i++]>>14;\r\n        var m = xh*l+h*xl;\r\n        l = xl*l+((m&0x3fff)<<14)+w[j]+c;\r\n        c = (l>>28)+(m>>14)+xh*h;\r\n        w[j++] = l&0xfffffff;\r\n      }\r\n      return c;\r\n    }\r\n    var inBrowser = typeof navigator !== \"undefined\";\r\n    if(inBrowser && j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\r\n      BigInteger.prototype.am = am2;\r\n      dbits = 30;\r\n    }\r\n    else if(inBrowser && j_lm && (navigator.appName != \"Netscape\")) {\r\n      BigInteger.prototype.am = am1;\r\n      dbits = 26;\r\n    }\r\n    else { // Mozilla/Netscape seems to prefer am3\r\n      BigInteger.prototype.am = am3;\r\n      dbits = 28;\r\n    }\r\n\r\n    BigInteger.prototype.DB = dbits;\r\n    BigInteger.prototype.DM = ((1<<dbits)-1);\r\n    BigInteger.prototype.DV = (1<<dbits);\r\n\r\n    var BI_FP = 52;\r\n    BigInteger.prototype.FV = Math.pow(2,BI_FP);\r\n    BigInteger.prototype.F1 = BI_FP-dbits;\r\n    BigInteger.prototype.F2 = 2*dbits-BI_FP;\r\n\r\n    // Digit conversions\r\n    var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n    var BI_RC = new Array();\r\n    var rr,vv;\r\n    rr = \"0\".charCodeAt(0);\r\n    for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\r\n    rr = \"a\".charCodeAt(0);\r\n    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\r\n    rr = \"A\".charCodeAt(0);\r\n    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\r\n\r\n    function int2char(n) { return BI_RM.charAt(n); }\r\n    function intAt(s,i) {\r\n      var c = BI_RC[s.charCodeAt(i)];\r\n      return (c==null)?-1:c;\r\n    }\r\n\r\n    // (protected) copy this to r\r\n    function bnpCopyTo(r) {\r\n      for(var i = this.t-1; i >= 0; --i) r[i] = this[i];\r\n      r.t = this.t;\r\n      r.s = this.s;\r\n    }\r\n\r\n    // (protected) set from integer value x, -DV <= x < DV\r\n    function bnpFromInt(x) {\r\n      this.t = 1;\r\n      this.s = (x<0)?-1:0;\r\n      if(x > 0) this[0] = x;\r\n      else if(x < -1) this[0] = x+this.DV;\r\n      else this.t = 0;\r\n    }\r\n\r\n    // return bigint initialized to value\r\n    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }\r\n\r\n    // (protected) set from string and radix\r\n    function bnpFromString(s,b) {\r\n      var k;\r\n      if(b == 16) k = 4;\r\n      else if(b == 8) k = 3;\r\n      else if(b == 256) k = 8; // byte array\r\n      else if(b == 2) k = 1;\r\n      else if(b == 32) k = 5;\r\n      else if(b == 4) k = 2;\r\n      else { this.fromRadix(s,b); return; }\r\n      this.t = 0;\r\n      this.s = 0;\r\n      var i = s.length, mi = false, sh = 0;\r\n      while(--i >= 0) {\r\n        var x = (k==8)?s[i]&0xff:intAt(s,i);\r\n        if(x < 0) {\r\n          if(s.charAt(i) == \"-\") mi = true;\r\n          continue;\r\n        }\r\n        mi = false;\r\n        if(sh == 0)\r\n          this[this.t++] = x;\r\n        else if(sh+k > this.DB) {\r\n          this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\r\n          this[this.t++] = (x>>(this.DB-sh));\r\n        }\r\n        else\r\n          this[this.t-1] |= x<<sh;\r\n        sh += k;\r\n        if(sh >= this.DB) sh -= this.DB;\r\n      }\r\n      if(k == 8 && (s[0]&0x80) != 0) {\r\n        this.s = -1;\r\n        if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\r\n      }\r\n      this.clamp();\r\n      if(mi) BigInteger.ZERO.subTo(this,this);\r\n    }\r\n\r\n    // (protected) clamp off excess high words\r\n    function bnpClamp() {\r\n      var c = this.s&this.DM;\r\n      while(this.t > 0 && this[this.t-1] == c) --this.t;\r\n    }\r\n\r\n    // (public) return string representation in given radix\r\n    function bnToString(b) {\r\n      if(this.s < 0) return \"-\"+this.negate().toString(b);\r\n      var k;\r\n      if(b == 16) k = 4;\r\n      else if(b == 8) k = 3;\r\n      else if(b == 2) k = 1;\r\n      else if(b == 32) k = 5;\r\n      else if(b == 4) k = 2;\r\n      else return this.toRadix(b);\r\n      var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\r\n      var p = this.DB-(i*this.DB)%k;\r\n      if(i-- > 0) {\r\n        if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }\r\n        while(i >= 0) {\r\n          if(p < k) {\r\n            d = (this[i]&((1<<p)-1))<<(k-p);\r\n            d |= this[--i]>>(p+=this.DB-k);\r\n          }\r\n          else {\r\n            d = (this[i]>>(p-=k))&km;\r\n            if(p <= 0) { p += this.DB; --i; }\r\n          }\r\n          if(d > 0) m = true;\r\n          if(m) r += int2char(d);\r\n        }\r\n      }\r\n      return m?r:\"0\";\r\n    }\r\n\r\n    // (public) -this\r\n    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\r\n\r\n    // (public) |this|\r\n    function bnAbs() { return (this.s<0)?this.negate():this; }\r\n\r\n    // (public) return + if this > a, - if this < a, 0 if equal\r\n    function bnCompareTo(a) {\r\n      var r = this.s-a.s;\r\n      if(r != 0) return r;\r\n      var i = this.t;\r\n      r = i-a.t;\r\n      if(r != 0) return (this.s<0)?-r:r;\r\n      while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;\r\n      return 0;\r\n    }\r\n\r\n    // returns bit length of the integer x\r\n    function nbits(x) {\r\n      var r = 1, t;\r\n      if((t=x>>>16) != 0) { x = t; r += 16; }\r\n      if((t=x>>8) != 0) { x = t; r += 8; }\r\n      if((t=x>>4) != 0) { x = t; r += 4; }\r\n      if((t=x>>2) != 0) { x = t; r += 2; }\r\n      if((t=x>>1) != 0) { x = t; r += 1; }\r\n      return r;\r\n    }\r\n\r\n    // (public) return the number of bits in \"this\"\r\n    function bnBitLength() {\r\n      if(this.t <= 0) return 0;\r\n      return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));\r\n    }\r\n\r\n    // (protected) r = this << n*DB\r\n    function bnpDLShiftTo(n,r) {\r\n      var i;\r\n      for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];\r\n      for(i = n-1; i >= 0; --i) r[i] = 0;\r\n      r.t = this.t+n;\r\n      r.s = this.s;\r\n    }\r\n\r\n    // (protected) r = this >> n*DB\r\n    function bnpDRShiftTo(n,r) {\r\n      for(var i = n; i < this.t; ++i) r[i-n] = this[i];\r\n      r.t = Math.max(this.t-n,0);\r\n      r.s = this.s;\r\n    }\r\n\r\n    // (protected) r = this << n\r\n    function bnpLShiftTo(n,r) {\r\n      var bs = n%this.DB;\r\n      var cbs = this.DB-bs;\r\n      var bm = (1<<cbs)-1;\r\n      var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\r\n      for(i = this.t-1; i >= 0; --i) {\r\n        r[i+ds+1] = (this[i]>>cbs)|c;\r\n        c = (this[i]&bm)<<bs;\r\n      }\r\n      for(i = ds-1; i >= 0; --i) r[i] = 0;\r\n      r[ds] = c;\r\n      r.t = this.t+ds+1;\r\n      r.s = this.s;\r\n      r.clamp();\r\n    }\r\n\r\n    // (protected) r = this >> n\r\n    function bnpRShiftTo(n,r) {\r\n      r.s = this.s;\r\n      var ds = Math.floor(n/this.DB);\r\n      if(ds >= this.t) { r.t = 0; return; }\r\n      var bs = n%this.DB;\r\n      var cbs = this.DB-bs;\r\n      var bm = (1<<bs)-1;\r\n      r[0] = this[ds]>>bs;\r\n      for(var i = ds+1; i < this.t; ++i) {\r\n        r[i-ds-1] |= (this[i]&bm)<<cbs;\r\n        r[i-ds] = this[i]>>bs;\r\n      }\r\n      if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;\r\n      r.t = this.t-ds;\r\n      r.clamp();\r\n    }\r\n\r\n    // (protected) r = this - a\r\n    function bnpSubTo(a,r) {\r\n      var i = 0, c = 0, m = Math.min(a.t,this.t);\r\n      while(i < m) {\r\n        c += this[i]-a[i];\r\n        r[i++] = c&this.DM;\r\n        c >>= this.DB;\r\n      }\r\n      if(a.t < this.t) {\r\n        c -= a.s;\r\n        while(i < this.t) {\r\n          c += this[i];\r\n          r[i++] = c&this.DM;\r\n          c >>= this.DB;\r\n        }\r\n        c += this.s;\r\n      }\r\n      else {\r\n        c += this.s;\r\n        while(i < a.t) {\r\n          c -= a[i];\r\n          r[i++] = c&this.DM;\r\n          c >>= this.DB;\r\n        }\r\n        c -= a.s;\r\n      }\r\n      r.s = (c<0)?-1:0;\r\n      if(c < -1) r[i++] = this.DV+c;\r\n      else if(c > 0) r[i++] = c;\r\n      r.t = i;\r\n      r.clamp();\r\n    }\r\n\r\n    // (protected) r = this * a, r != this,a (HAC 14.12)\r\n    // \"this\" should be the larger one if appropriate.\r\n    function bnpMultiplyTo(a,r) {\r\n      var x = this.abs(), y = a.abs();\r\n      var i = x.t;\r\n      r.t = i+y.t;\r\n      while(--i >= 0) r[i] = 0;\r\n      for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);\r\n      r.s = 0;\r\n      r.clamp();\r\n      if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\r\n    }\r\n\r\n    // (protected) r = this^2, r != this (HAC 14.16)\r\n    function bnpSquareTo(r) {\r\n      var x = this.abs();\r\n      var i = r.t = 2*x.t;\r\n      while(--i >= 0) r[i] = 0;\r\n      for(i = 0; i < x.t-1; ++i) {\r\n        var c = x.am(i,x[i],r,2*i,0,1);\r\n        if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\r\n          r[i+x.t] -= x.DV;\r\n          r[i+x.t+1] = 1;\r\n        }\r\n      }\r\n      if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);\r\n      r.s = 0;\r\n      r.clamp();\r\n    }\r\n\r\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\r\n    // r != q, this != m.  q or r may be null.\r\n    function bnpDivRemTo(m,q,r) {\r\n      var pm = m.abs();\r\n      if(pm.t <= 0) return;\r\n      var pt = this.abs();\r\n      if(pt.t < pm.t) {\r\n        if(q != null) q.fromInt(0);\r\n        if(r != null) this.copyTo(r);\r\n        return;\r\n      }\r\n      if(r == null) r = nbi();\r\n      var y = nbi(), ts = this.s, ms = m.s;\r\n      var nsh = this.DB-nbits(pm[pm.t-1]);   // normalize modulus\r\n      if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }\r\n      else { pm.copyTo(y); pt.copyTo(r); }\r\n      var ys = y.t;\r\n      var y0 = y[ys-1];\r\n      if(y0 == 0) return;\r\n      var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);\r\n      var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\r\n      var i = r.t, j = i-ys, t = (q==null)?nbi():q;\r\n      y.dlShiftTo(j,t);\r\n      if(r.compareTo(t) >= 0) {\r\n        r[r.t++] = 1;\r\n        r.subTo(t,r);\r\n      }\r\n      BigInteger.ONE.dlShiftTo(ys,t);\r\n      t.subTo(y,y);  // \"negative\" y so we can replace sub with am later\r\n      while(y.t < ys) y[y.t++] = 0;\r\n      while(--j >= 0) {\r\n        // Estimate quotient digit\r\n        var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);\r\n        if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {   // Try it out\r\n          y.dlShiftTo(j,t);\r\n          r.subTo(t,r);\r\n          while(r[i] < --qd) r.subTo(t,r);\r\n        }\r\n      }\r\n      if(q != null) {\r\n        r.drShiftTo(ys,q);\r\n        if(ts != ms) BigInteger.ZERO.subTo(q,q);\r\n      }\r\n      r.t = ys;\r\n      r.clamp();\r\n      if(nsh > 0) r.rShiftTo(nsh,r); // Denormalize remainder\r\n      if(ts < 0) BigInteger.ZERO.subTo(r,r);\r\n    }\r\n\r\n    // (public) this mod a\r\n    function bnMod(a) {\r\n      var r = nbi();\r\n      this.abs().divRemTo(a,null,r);\r\n      if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\r\n      return r;\r\n    }\r\n\r\n    // Modular reduction using \"classic\" algorithm\r\n    function Classic(m) { this.m = m; }\r\n    function cConvert(x) {\r\n      if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\r\n      else return x;\r\n    }\r\n    function cRevert(x) { return x; }\r\n    function cReduce(x) { x.divRemTo(this.m,null,x); }\r\n    function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\r\n    function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\r\n\r\n    Classic.prototype.convert = cConvert;\r\n    Classic.prototype.revert = cRevert;\r\n    Classic.prototype.reduce = cReduce;\r\n    Classic.prototype.mulTo = cMulTo;\r\n    Classic.prototype.sqrTo = cSqrTo;\r\n\r\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\r\n    // justification:\r\n    //         xy == 1 (mod m)\r\n    //         xy =  1+km\r\n    //   xy(2-xy) = (1+km)(1-km)\r\n    // x[y(2-xy)] = 1-k^2m^2\r\n    // x[y(2-xy)] == 1 (mod m^2)\r\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\r\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\r\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\r\n    function bnpInvDigit() {\r\n      if(this.t < 1) return 0;\r\n      var x = this[0];\r\n      if((x&1) == 0) return 0;\r\n      var y = x&3;       // y == 1/x mod 2^2\r\n      y = (y*(2-(x&0xf)*y))&0xf; // y == 1/x mod 2^4\r\n      y = (y*(2-(x&0xff)*y))&0xff;   // y == 1/x mod 2^8\r\n      y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;    // y == 1/x mod 2^16\r\n      // last step - calculate inverse mod DV directly;\r\n      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\r\n      y = (y*(2-x*y%this.DV))%this.DV;       // y == 1/x mod 2^dbits\r\n      // we really want the negative inverse, and -DV < y < DV\r\n      return (y>0)?this.DV-y:-y;\r\n    }\r\n\r\n    // Montgomery reduction\r\n    function Montgomery(m) {\r\n      this.m = m;\r\n      this.mp = m.invDigit();\r\n      this.mpl = this.mp&0x7fff;\r\n      this.mph = this.mp>>15;\r\n      this.um = (1<<(m.DB-15))-1;\r\n      this.mt2 = 2*m.t;\r\n    }\r\n\r\n    // xR mod m\r\n    function montConvert(x) {\r\n      var r = nbi();\r\n      x.abs().dlShiftTo(this.m.t,r);\r\n      r.divRemTo(this.m,null,r);\r\n      if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\r\n      return r;\r\n    }\r\n\r\n    // x/R mod m\r\n    function montRevert(x) {\r\n      var r = nbi();\r\n      x.copyTo(r);\r\n      this.reduce(r);\r\n      return r;\r\n    }\r\n\r\n    // x = x/R mod m (HAC 14.32)\r\n    function montReduce(x) {\r\n      while(x.t <= this.mt2) // pad x so am has enough room later\r\n        x[x.t++] = 0;\r\n      for(var i = 0; i < this.m.t; ++i) {\r\n        // faster way of calculating u0 = x[i]*mp mod DV\r\n        var j = x[i]&0x7fff;\r\n        var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\r\n        // use am to combine the multiply-shift-add into one call\r\n        j = i+this.m.t;\r\n        x[j] += this.m.am(0,u0,x,i,0,this.m.t);\r\n        // propagate carry\r\n        while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }\r\n      }\r\n      x.clamp();\r\n      x.drShiftTo(this.m.t,x);\r\n      if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\r\n    }\r\n\r\n    // r = \"x^2/R mod m\"; x != r\r\n    function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\r\n\r\n    // r = \"xy/R mod m\"; x,y != r\r\n    function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\r\n\r\n    Montgomery.prototype.convert = montConvert;\r\n    Montgomery.prototype.revert = montRevert;\r\n    Montgomery.prototype.reduce = montReduce;\r\n    Montgomery.prototype.mulTo = montMulTo;\r\n    Montgomery.prototype.sqrTo = montSqrTo;\r\n\r\n    // (protected) true iff this is even\r\n    function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }\r\n\r\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\r\n    function bnpExp(e,z) {\r\n      if(e > 0xffffffff || e < 1) return BigInteger.ONE;\r\n      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\r\n      g.copyTo(r);\r\n      while(--i >= 0) {\r\n        z.sqrTo(r,r2);\r\n        if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\r\n        else { var t = r; r = r2; r2 = t; }\r\n      }\r\n      return z.revert(r);\r\n    }\r\n\r\n    // (public) this^e % m, 0 <= e < 2^32\r\n    function bnModPowInt(e,m) {\r\n      var z;\r\n      if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\r\n      return this.exp(e,z);\r\n    }\r\n\r\n    // protected\r\n    BigInteger.prototype.copyTo = bnpCopyTo;\r\n    BigInteger.prototype.fromInt = bnpFromInt;\r\n    BigInteger.prototype.fromString = bnpFromString;\r\n    BigInteger.prototype.clamp = bnpClamp;\r\n    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\r\n    BigInteger.prototype.drShiftTo = bnpDRShiftTo;\r\n    BigInteger.prototype.lShiftTo = bnpLShiftTo;\r\n    BigInteger.prototype.rShiftTo = bnpRShiftTo;\r\n    BigInteger.prototype.subTo = bnpSubTo;\r\n    BigInteger.prototype.multiplyTo = bnpMultiplyTo;\r\n    BigInteger.prototype.squareTo = bnpSquareTo;\r\n    BigInteger.prototype.divRemTo = bnpDivRemTo;\r\n    BigInteger.prototype.invDigit = bnpInvDigit;\r\n    BigInteger.prototype.isEven = bnpIsEven;\r\n    BigInteger.prototype.exp = bnpExp;\r\n\r\n    // public\r\n    BigInteger.prototype.toString = bnToString;\r\n    BigInteger.prototype.negate = bnNegate;\r\n    BigInteger.prototype.abs = bnAbs;\r\n    BigInteger.prototype.compareTo = bnCompareTo;\r\n    BigInteger.prototype.bitLength = bnBitLength;\r\n    BigInteger.prototype.mod = bnMod;\r\n    BigInteger.prototype.modPowInt = bnModPowInt;\r\n\r\n    // \"constants\"\r\n    BigInteger.ZERO = nbv(0);\r\n    BigInteger.ONE = nbv(1);\r\n\r\n    // Copyright (c) 2005-2009  Tom Wu\r\n    // All Rights Reserved.\r\n    // See \"LICENSE\" for details.\r\n\r\n    // Extended JavaScript BN functions, required for RSA private ops.\r\n\r\n    // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\r\n    // Version 1.2: square() API, isProbablePrime fix\r\n\r\n    // (public)\r\n    function bnClone() { var r = nbi(); this.copyTo(r); return r; }\r\n\r\n    // (public) return value as integer\r\n    function bnIntValue() {\r\n      if(this.s < 0) {\r\n        if(this.t == 1) return this[0]-this.DV;\r\n        else if(this.t == 0) return -1;\r\n      }\r\n      else if(this.t == 1) return this[0];\r\n      else if(this.t == 0) return 0;\r\n      // assumes 16 < DB < 32\r\n      return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];\r\n    }\r\n\r\n    // (public) return value as byte\r\n    function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }\r\n\r\n    // (public) return value as short (assumes DB>=16)\r\n    function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }\r\n\r\n    // (protected) return x s.t. r^x < DV\r\n    function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\r\n\r\n    // (public) 0 if this == 0, 1 if this > 0\r\n    function bnSigNum() {\r\n      if(this.s < 0) return -1;\r\n      else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\r\n      else return 1;\r\n    }\r\n\r\n    // (protected) convert to radix string\r\n    function bnpToRadix(b) {\r\n      if(b == null) b = 10;\r\n      if(this.signum() == 0 || b < 2 || b > 36) return \"0\";\r\n      var cs = this.chunkSize(b);\r\n      var a = Math.pow(b,cs);\r\n      var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\r\n      this.divRemTo(d,y,z);\r\n      while(y.signum() > 0) {\r\n        r = (a+z.intValue()).toString(b).substr(1) + r;\r\n        y.divRemTo(d,y,z);\r\n      }\r\n      return z.intValue().toString(b) + r;\r\n    }\r\n\r\n    // (protected) convert from radix string\r\n    function bnpFromRadix(s,b) {\r\n      this.fromInt(0);\r\n      if(b == null) b = 10;\r\n      var cs = this.chunkSize(b);\r\n      var d = Math.pow(b,cs), mi = false, j = 0, w = 0;\r\n      for(var i = 0; i < s.length; ++i) {\r\n        var x = intAt(s,i);\r\n        if(x < 0) {\r\n          if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\r\n          continue;\r\n        }\r\n        w = b*w+x;\r\n        if(++j >= cs) {\r\n          this.dMultiply(d);\r\n          this.dAddOffset(w,0);\r\n          j = 0;\r\n          w = 0;\r\n        }\r\n      }\r\n      if(j > 0) {\r\n        this.dMultiply(Math.pow(b,j));\r\n        this.dAddOffset(w,0);\r\n      }\r\n      if(mi) BigInteger.ZERO.subTo(this,this);\r\n    }\r\n\r\n    // (protected) alternate constructor\r\n    function bnpFromNumber(a,b,c) {\r\n      if(\"number\" == typeof b) {\r\n        // new BigInteger(int,int,RNG)\r\n        if(a < 2) this.fromInt(1);\r\n        else {\r\n          this.fromNumber(a,c);\r\n          if(!this.testBit(a-1))    // force MSB set\r\n            this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\r\n          if(this.isEven()) this.dAddOffset(1,0); // force odd\r\n          while(!this.isProbablePrime(b)) {\r\n            this.dAddOffset(2,0);\r\n            if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // new BigInteger(int,RNG)\r\n        var x = new Array(), t = a&7;\r\n        x.length = (a>>3)+1;\r\n        b.nextBytes(x);\r\n        if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\r\n        this.fromString(x,256);\r\n      }\r\n    }\r\n\r\n    // (public) convert to bigendian byte array\r\n    function bnToByteArray() {\r\n      var i = this.t, r = new Array();\r\n      r[0] = this.s;\r\n      var p = this.DB-(i*this.DB)%8, d, k = 0;\r\n      if(i-- > 0) {\r\n        if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)\r\n          r[k++] = d|(this.s<<(this.DB-p));\r\n        while(i >= 0) {\r\n          if(p < 8) {\r\n            d = (this[i]&((1<<p)-1))<<(8-p);\r\n            d |= this[--i]>>(p+=this.DB-8);\r\n          }\r\n          else {\r\n            d = (this[i]>>(p-=8))&0xff;\r\n            if(p <= 0) { p += this.DB; --i; }\r\n          }\r\n          if((d&0x80) != 0) d |= -256;\r\n          if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\r\n          if(k > 0 || d != this.s) r[k++] = d;\r\n        }\r\n      }\r\n      return r;\r\n    }\r\n\r\n    function bnEquals(a) { return(this.compareTo(a)==0); }\r\n    function bnMin(a) { return(this.compareTo(a)<0)?this:a; }\r\n    function bnMax(a) { return(this.compareTo(a)>0)?this:a; }\r\n\r\n    // (protected) r = this op a (bitwise)\r\n    function bnpBitwiseTo(a,op,r) {\r\n      var i, f, m = Math.min(a.t,this.t);\r\n      for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);\r\n      if(a.t < this.t) {\r\n        f = a.s&this.DM;\r\n        for(i = m; i < this.t; ++i) r[i] = op(this[i],f);\r\n        r.t = this.t;\r\n      }\r\n      else {\r\n        f = this.s&this.DM;\r\n        for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);\r\n        r.t = a.t;\r\n      }\r\n      r.s = op(this.s,a.s);\r\n      r.clamp();\r\n    }\r\n\r\n    // (public) this & a\r\n    function op_and(x,y) { return x&y; }\r\n    function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\r\n\r\n    // (public) this | a\r\n    function op_or(x,y) { return x|y; }\r\n    function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\r\n\r\n    // (public) this ^ a\r\n    function op_xor(x,y) { return x^y; }\r\n    function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\r\n\r\n    // (public) this & ~a\r\n    function op_andnot(x,y) { return x&~y; }\r\n    function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\r\n\r\n    // (public) ~this\r\n    function bnNot() {\r\n      var r = nbi();\r\n      for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];\r\n      r.t = this.t;\r\n      r.s = ~this.s;\r\n      return r;\r\n    }\r\n\r\n    // (public) this << n\r\n    function bnShiftLeft(n) {\r\n      var r = nbi();\r\n      if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\r\n      return r;\r\n    }\r\n\r\n    // (public) this >> n\r\n    function bnShiftRight(n) {\r\n      var r = nbi();\r\n      if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\r\n      return r;\r\n    }\r\n\r\n    // return index of lowest 1-bit in x, x < 2^31\r\n    function lbit(x) {\r\n      if(x == 0) return -1;\r\n      var r = 0;\r\n      if((x&0xffff) == 0) { x >>= 16; r += 16; }\r\n      if((x&0xff) == 0) { x >>= 8; r += 8; }\r\n      if((x&0xf) == 0) { x >>= 4; r += 4; }\r\n      if((x&3) == 0) { x >>= 2; r += 2; }\r\n      if((x&1) == 0) ++r;\r\n      return r;\r\n    }\r\n\r\n    // (public) returns index of lowest 1-bit (or -1 if none)\r\n    function bnGetLowestSetBit() {\r\n      for(var i = 0; i < this.t; ++i)\r\n        if(this[i] != 0) return i*this.DB+lbit(this[i]);\r\n      if(this.s < 0) return this.t*this.DB;\r\n      return -1;\r\n    }\r\n\r\n    // return number of 1 bits in x\r\n    function cbit(x) {\r\n      var r = 0;\r\n      while(x != 0) { x &= x-1; ++r; }\r\n      return r;\r\n    }\r\n\r\n    // (public) return number of set bits\r\n    function bnBitCount() {\r\n      var r = 0, x = this.s&this.DM;\r\n      for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);\r\n      return r;\r\n    }\r\n\r\n    // (public) true iff nth bit is set\r\n    function bnTestBit(n) {\r\n      var j = Math.floor(n/this.DB);\r\n      if(j >= this.t) return(this.s!=0);\r\n      return((this[j]&(1<<(n%this.DB)))!=0);\r\n    }\r\n\r\n    // (protected) this op (1<<n)\r\n    function bnpChangeBit(n,op) {\r\n      var r = BigInteger.ONE.shiftLeft(n);\r\n      this.bitwiseTo(r,op,r);\r\n      return r;\r\n    }\r\n\r\n    // (public) this | (1<<n)\r\n    function bnSetBit(n) { return this.changeBit(n,op_or); }\r\n\r\n    // (public) this & ~(1<<n)\r\n    function bnClearBit(n) { return this.changeBit(n,op_andnot); }\r\n\r\n    // (public) this ^ (1<<n)\r\n    function bnFlipBit(n) { return this.changeBit(n,op_xor); }\r\n\r\n    // (protected) r = this + a\r\n    function bnpAddTo(a,r) {\r\n      var i = 0, c = 0, m = Math.min(a.t,this.t);\r\n      while(i < m) {\r\n        c += this[i]+a[i];\r\n        r[i++] = c&this.DM;\r\n        c >>= this.DB;\r\n      }\r\n      if(a.t < this.t) {\r\n        c += a.s;\r\n        while(i < this.t) {\r\n          c += this[i];\r\n          r[i++] = c&this.DM;\r\n          c >>= this.DB;\r\n        }\r\n        c += this.s;\r\n      }\r\n      else {\r\n        c += this.s;\r\n        while(i < a.t) {\r\n          c += a[i];\r\n          r[i++] = c&this.DM;\r\n          c >>= this.DB;\r\n        }\r\n        c += a.s;\r\n      }\r\n      r.s = (c<0)?-1:0;\r\n      if(c > 0) r[i++] = c;\r\n      else if(c < -1) r[i++] = this.DV+c;\r\n      r.t = i;\r\n      r.clamp();\r\n    }\r\n\r\n    // (public) this + a\r\n    function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\r\n\r\n    // (public) this - a\r\n    function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\r\n\r\n    // (public) this * a\r\n    function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\r\n\r\n    // (public) this^2\r\n    function bnSquare() { var r = nbi(); this.squareTo(r); return r; }\r\n\r\n    // (public) this / a\r\n    function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\r\n\r\n    // (public) this % a\r\n    function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\r\n\r\n    // (public) [this/a,this%a]\r\n    function bnDivideAndRemainder(a) {\r\n      var q = nbi(), r = nbi();\r\n      this.divRemTo(a,q,r);\r\n      return new Array(q,r);\r\n    }\r\n\r\n    // (protected) this *= n, this >= 0, 1 < n < DV\r\n    function bnpDMultiply(n) {\r\n      this[this.t] = this.am(0,n-1,this,0,0,this.t);\r\n      ++this.t;\r\n      this.clamp();\r\n    }\r\n\r\n    // (protected) this += n << w words, this >= 0\r\n    function bnpDAddOffset(n,w) {\r\n      if(n == 0) return;\r\n      while(this.t <= w) this[this.t++] = 0;\r\n      this[w] += n;\r\n      while(this[w] >= this.DV) {\r\n        this[w] -= this.DV;\r\n        if(++w >= this.t) this[this.t++] = 0;\r\n        ++this[w];\r\n      }\r\n    }\r\n\r\n    // A \"null\" reducer\r\n    function NullExp() {}\r\n    function nNop(x) { return x; }\r\n    function nMulTo(x,y,r) { x.multiplyTo(y,r); }\r\n    function nSqrTo(x,r) { x.squareTo(r); }\r\n\r\n    NullExp.prototype.convert = nNop;\r\n    NullExp.prototype.revert = nNop;\r\n    NullExp.prototype.mulTo = nMulTo;\r\n    NullExp.prototype.sqrTo = nSqrTo;\r\n\r\n    // (public) this^e\r\n    function bnPow(e) { return this.exp(e,new NullExp()); }\r\n\r\n    // (protected) r = lower n words of \"this * a\", a.t <= n\r\n    // \"this\" should be the larger one if appropriate.\r\n    function bnpMultiplyLowerTo(a,n,r) {\r\n      var i = Math.min(this.t+a.t,n);\r\n      r.s = 0; // assumes a,this >= 0\r\n      r.t = i;\r\n      while(i > 0) r[--i] = 0;\r\n      var j;\r\n      for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);\r\n      for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);\r\n      r.clamp();\r\n    }\r\n\r\n    // (protected) r = \"this * a\" without lower n words, n > 0\r\n    // \"this\" should be the larger one if appropriate.\r\n    function bnpMultiplyUpperTo(a,n,r) {\r\n      --n;\r\n      var i = r.t = this.t+a.t-n;\r\n      r.s = 0; // assumes a,this >= 0\r\n      while(--i >= 0) r[i] = 0;\r\n      for(i = Math.max(n-this.t,0); i < a.t; ++i)\r\n        r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);\r\n      r.clamp();\r\n      r.drShiftTo(1,r);\r\n    }\r\n\r\n    // Barrett modular reduction\r\n    function Barrett(m) {\r\n      // setup Barrett\r\n      this.r2 = nbi();\r\n      this.q3 = nbi();\r\n      BigInteger.ONE.dlShiftTo(2*m.t,this.r2);\r\n      this.mu = this.r2.divide(m);\r\n      this.m = m;\r\n    }\r\n\r\n    function barrettConvert(x) {\r\n      if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\r\n      else if(x.compareTo(this.m) < 0) return x;\r\n      else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\r\n    }\r\n\r\n    function barrettRevert(x) { return x; }\r\n\r\n    // x = x mod m (HAC 14.42)\r\n    function barrettReduce(x) {\r\n      x.drShiftTo(this.m.t-1,this.r2);\r\n      if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\r\n      this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\r\n      this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\r\n      while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\r\n      x.subTo(this.r2,x);\r\n      while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\r\n    }\r\n\r\n    // r = x^2 mod m; x != r\r\n    function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\r\n\r\n    // r = x*y mod m; x,y != r\r\n    function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\r\n\r\n    Barrett.prototype.convert = barrettConvert;\r\n    Barrett.prototype.revert = barrettRevert;\r\n    Barrett.prototype.reduce = barrettReduce;\r\n    Barrett.prototype.mulTo = barrettMulTo;\r\n    Barrett.prototype.sqrTo = barrettSqrTo;\r\n\r\n    // (public) this^e % m (HAC 14.85)\r\n    function bnModPow(e,m) {\r\n      var i = e.bitLength(), k, r = nbv(1), z;\r\n      if(i <= 0) return r;\r\n      else if(i < 18) k = 1;\r\n      else if(i < 48) k = 3;\r\n      else if(i < 144) k = 4;\r\n      else if(i < 768) k = 5;\r\n      else k = 6;\r\n      if(i < 8)\r\n        z = new Classic(m);\r\n      else if(m.isEven())\r\n        z = new Barrett(m);\r\n      else\r\n        z = new Montgomery(m);\r\n\r\n      // precomputation\r\n      var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\r\n      g[1] = z.convert(this);\r\n      if(k > 1) {\r\n        var g2 = nbi();\r\n        z.sqrTo(g[1],g2);\r\n        while(n <= km) {\r\n          g[n] = nbi();\r\n          z.mulTo(g2,g[n-2],g[n]);\r\n          n += 2;\r\n        }\r\n      }\r\n\r\n      var j = e.t-1, w, is1 = true, r2 = nbi(), t;\r\n      i = nbits(e[j])-1;\r\n      while(j >= 0) {\r\n        if(i >= k1) w = (e[j]>>(i-k1))&km;\r\n        else {\r\n          w = (e[j]&((1<<(i+1))-1))<<(k1-i);\r\n          if(j > 0) w |= e[j-1]>>(this.DB+i-k1);\r\n        }\r\n\r\n        n = k;\r\n        while((w&1) == 0) { w >>= 1; --n; }\r\n        if((i -= n) < 0) { i += this.DB; --j; }\r\n        if(is1) {    // ret == 1, don't bother squaring or multiplying it\r\n          g[w].copyTo(r);\r\n          is1 = false;\r\n        }\r\n        else {\r\n          while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\r\n          if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\r\n          z.mulTo(r2,g[w],r);\r\n        }\r\n\r\n        while(j >= 0 && (e[j]&(1<<i)) == 0) {\r\n          z.sqrTo(r,r2); t = r; r = r2; r2 = t;\r\n          if(--i < 0) { i = this.DB-1; --j; }\r\n        }\r\n      }\r\n      return z.revert(r);\r\n    }\r\n\r\n    // (public) gcd(this,a) (HAC 14.54)\r\n    function bnGCD(a) {\r\n      var x = (this.s<0)?this.negate():this.clone();\r\n      var y = (a.s<0)?a.negate():a.clone();\r\n      if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\r\n      var i = x.getLowestSetBit(), g = y.getLowestSetBit();\r\n      if(g < 0) return x;\r\n      if(i < g) g = i;\r\n      if(g > 0) {\r\n        x.rShiftTo(g,x);\r\n        y.rShiftTo(g,y);\r\n      }\r\n      while(x.signum() > 0) {\r\n        if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\r\n        if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\r\n        if(x.compareTo(y) >= 0) {\r\n          x.subTo(y,x);\r\n          x.rShiftTo(1,x);\r\n        }\r\n        else {\r\n          y.subTo(x,y);\r\n          y.rShiftTo(1,y);\r\n        }\r\n      }\r\n      if(g > 0) y.lShiftTo(g,y);\r\n      return y;\r\n    }\r\n\r\n    // (protected) this % n, n < 2^26\r\n    function bnpModInt(n) {\r\n      if(n <= 0) return 0;\r\n      var d = this.DV%n, r = (this.s<0)?n-1:0;\r\n      if(this.t > 0)\r\n        if(d == 0) r = this[0]%n;\r\n        else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;\r\n      return r;\r\n    }\r\n\r\n    // (public) 1/this % m (HAC 14.61)\r\n    function bnModInverse(m) {\r\n      var ac = m.isEven();\r\n      if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\r\n      var u = m.clone(), v = this.clone();\r\n      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\r\n      while(u.signum() != 0) {\r\n        while(u.isEven()) {\r\n          u.rShiftTo(1,u);\r\n          if(ac) {\r\n            if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\r\n            a.rShiftTo(1,a);\r\n          }\r\n          else if(!b.isEven()) b.subTo(m,b);\r\n          b.rShiftTo(1,b);\r\n        }\r\n        while(v.isEven()) {\r\n          v.rShiftTo(1,v);\r\n          if(ac) {\r\n            if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\r\n            c.rShiftTo(1,c);\r\n          }\r\n          else if(!d.isEven()) d.subTo(m,d);\r\n          d.rShiftTo(1,d);\r\n        }\r\n        if(u.compareTo(v) >= 0) {\r\n          u.subTo(v,u);\r\n          if(ac) a.subTo(c,a);\r\n          b.subTo(d,b);\r\n        }\r\n        else {\r\n          v.subTo(u,v);\r\n          if(ac) c.subTo(a,c);\r\n          d.subTo(b,d);\r\n        }\r\n      }\r\n      if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\r\n      if(d.compareTo(m) >= 0) return d.subtract(m);\r\n      if(d.signum() < 0) d.addTo(m,d); else return d;\r\n      if(d.signum() < 0) return d.add(m); else return d;\r\n    }\r\n\r\n    var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\r\n    var lplim = (1<<26)/lowprimes[lowprimes.length-1];\r\n\r\n    // (public) test primality with certainty >= 1-.5^t\r\n    function bnIsProbablePrime(t) {\r\n      var i, x = this.abs();\r\n      if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {\r\n        for(i = 0; i < lowprimes.length; ++i)\r\n          if(x[0] == lowprimes[i]) return true;\r\n        return false;\r\n      }\r\n      if(x.isEven()) return false;\r\n      i = 1;\r\n      while(i < lowprimes.length) {\r\n        var m = lowprimes[i], j = i+1;\r\n        while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\r\n        m = x.modInt(m);\r\n        while(i < j) if(m%lowprimes[i++] == 0) return false;\r\n      }\r\n      return x.millerRabin(t);\r\n    }\r\n\r\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\r\n    function bnpMillerRabin(t) {\r\n      var n1 = this.subtract(BigInteger.ONE);\r\n      var k = n1.getLowestSetBit();\r\n      if(k <= 0) return false;\r\n      var r = n1.shiftRight(k);\r\n      t = (t+1)>>1;\r\n      if(t > lowprimes.length) t = lowprimes.length;\r\n      var a = nbi();\r\n      for(var i = 0; i < t; ++i) {\r\n        //Pick bases at random, instead of starting at 2\r\n        a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);\r\n        var y = a.modPow(r,this);\r\n        if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\r\n          var j = 1;\r\n          while(j++ < k && y.compareTo(n1) != 0) {\r\n            y = y.modPowInt(2,this);\r\n            if(y.compareTo(BigInteger.ONE) == 0) return false;\r\n          }\r\n          if(y.compareTo(n1) != 0) return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    // protected\r\n    BigInteger.prototype.chunkSize = bnpChunkSize;\r\n    BigInteger.prototype.toRadix = bnpToRadix;\r\n    BigInteger.prototype.fromRadix = bnpFromRadix;\r\n    BigInteger.prototype.fromNumber = bnpFromNumber;\r\n    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\r\n    BigInteger.prototype.changeBit = bnpChangeBit;\r\n    BigInteger.prototype.addTo = bnpAddTo;\r\n    BigInteger.prototype.dMultiply = bnpDMultiply;\r\n    BigInteger.prototype.dAddOffset = bnpDAddOffset;\r\n    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\r\n    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\r\n    BigInteger.prototype.modInt = bnpModInt;\r\n    BigInteger.prototype.millerRabin = bnpMillerRabin;\r\n\r\n    // public\r\n    BigInteger.prototype.clone = bnClone;\r\n    BigInteger.prototype.intValue = bnIntValue;\r\n    BigInteger.prototype.byteValue = bnByteValue;\r\n    BigInteger.prototype.shortValue = bnShortValue;\r\n    BigInteger.prototype.signum = bnSigNum;\r\n    BigInteger.prototype.toByteArray = bnToByteArray;\r\n    BigInteger.prototype.equals = bnEquals;\r\n    BigInteger.prototype.min = bnMin;\r\n    BigInteger.prototype.max = bnMax;\r\n    BigInteger.prototype.and = bnAnd;\r\n    BigInteger.prototype.or = bnOr;\r\n    BigInteger.prototype.xor = bnXor;\r\n    BigInteger.prototype.andNot = bnAndNot;\r\n    BigInteger.prototype.not = bnNot;\r\n    BigInteger.prototype.shiftLeft = bnShiftLeft;\r\n    BigInteger.prototype.shiftRight = bnShiftRight;\r\n    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\r\n    BigInteger.prototype.bitCount = bnBitCount;\r\n    BigInteger.prototype.testBit = bnTestBit;\r\n    BigInteger.prototype.setBit = bnSetBit;\r\n    BigInteger.prototype.clearBit = bnClearBit;\r\n    BigInteger.prototype.flipBit = bnFlipBit;\r\n    BigInteger.prototype.add = bnAdd;\r\n    BigInteger.prototype.subtract = bnSubtract;\r\n    BigInteger.prototype.multiply = bnMultiply;\r\n    BigInteger.prototype.divide = bnDivide;\r\n    BigInteger.prototype.remainder = bnRemainder;\r\n    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\r\n    BigInteger.prototype.modPow = bnModPow;\r\n    BigInteger.prototype.modInverse = bnModInverse;\r\n    BigInteger.prototype.pow = bnPow;\r\n    BigInteger.prototype.gcd = bnGCD;\r\n    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\r\n\r\n    // JSBN-specific extension\r\n    BigInteger.prototype.square = bnSquare;\r\n\r\n    // Expose the Barrett function\r\n    BigInteger.prototype.Barrett = Barrett\r\n\r\n    // BigInteger interfaces not implemented in jsbn:\r\n\r\n    // BigInteger(int signum, byte[] magnitude)\r\n    // double doubleValue()\r\n    // float floatValue()\r\n    // int hashCode()\r\n    // long longValue()\r\n    // static BigInteger valueOf(long val)\r\n\r\n    // Random number generator - requires a PRNG backend, e.g. prng4.js\r\n\r\n    // For best results, put code like\r\n    // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\r\n    // in your main HTML document.\r\n\r\n    var rng_state;\r\n    var rng_pool;\r\n    var rng_pptr;\r\n\r\n    // Mix in a 32-bit integer into the pool\r\n    function rng_seed_int(x) {\r\n      rng_pool[rng_pptr++] ^= x & 255;\r\n      rng_pool[rng_pptr++] ^= (x >> 8) & 255;\r\n      rng_pool[rng_pptr++] ^= (x >> 16) & 255;\r\n      rng_pool[rng_pptr++] ^= (x >> 24) & 255;\r\n      if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\r\n    }\r\n\r\n    // Mix in the current time (w/milliseconds) into the pool\r\n    function rng_seed_time() {\r\n      rng_seed_int(new Date().getTime());\r\n    }\r\n\r\n    // Initialize the pool with junk if needed.\r\n    if(rng_pool == null) {\r\n      rng_pool = new Array();\r\n      rng_pptr = 0;\r\n      var t;\r\n      if(typeof window !== \"undefined\" && window.crypto) {\r\n        if (window.crypto.getRandomValues) {\r\n          // Use webcrypto if available\r\n          var ua = new Uint8Array(32);\r\n          window.crypto.getRandomValues(ua);\r\n          for(t = 0; t < 32; ++t)\r\n            rng_pool[rng_pptr++] = ua[t];\r\n        }\r\n        else if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\") {\r\n          // Extract entropy (256 bits) from NS4 RNG if available\r\n          var z = window.crypto.random(32);\r\n          for(t = 0; t < z.length; ++t)\r\n            rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\r\n        }\r\n      }\r\n      while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\r\n        t = Math.floor(65536 * Math.random());\r\n        rng_pool[rng_pptr++] = t >>> 8;\r\n        rng_pool[rng_pptr++] = t & 255;\r\n      }\r\n      rng_pptr = 0;\r\n      rng_seed_time();\r\n      //rng_seed_int(window.screenX);\r\n      //rng_seed_int(window.screenY);\r\n    }\r\n\r\n    function rng_get_byte() {\r\n      if(rng_state == null) {\r\n        rng_seed_time();\r\n        rng_state = prng_newstate();\r\n        rng_state.init(rng_pool);\r\n        for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\r\n          rng_pool[rng_pptr] = 0;\r\n        rng_pptr = 0;\r\n        //rng_pool = null;\r\n      }\r\n      // TODO: allow reseeding after first request\r\n      return rng_state.next();\r\n    }\r\n\r\n    function rng_get_bytes(ba) {\r\n      var i;\r\n      for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\r\n    }\r\n\r\n    function SecureRandom() {}\r\n\r\n    SecureRandom.prototype.nextBytes = rng_get_bytes;\r\n\r\n    // prng4.js - uses Arcfour as a PRNG\r\n\r\n    function Arcfour() {\r\n      this.i = 0;\r\n      this.j = 0;\r\n      this.S = new Array();\r\n    }\r\n\r\n    // Initialize arcfour context from key, an array of ints, each from [0..255]\r\n    function ARC4init(key) {\r\n      var i, j, t;\r\n      for(i = 0; i < 256; ++i)\r\n        this.S[i] = i;\r\n      j = 0;\r\n      for(i = 0; i < 256; ++i) {\r\n        j = (j + this.S[i] + key[i % key.length]) & 255;\r\n        t = this.S[i];\r\n        this.S[i] = this.S[j];\r\n        this.S[j] = t;\r\n      }\r\n      this.i = 0;\r\n      this.j = 0;\r\n    }\r\n\r\n    function ARC4next() {\r\n      var t;\r\n      this.i = (this.i + 1) & 255;\r\n      this.j = (this.j + this.S[this.i]) & 255;\r\n      t = this.S[this.i];\r\n      this.S[this.i] = this.S[this.j];\r\n      this.S[this.j] = t;\r\n      return this.S[(t + this.S[this.i]) & 255];\r\n    }\r\n\r\n    Arcfour.prototype.init = ARC4init;\r\n    Arcfour.prototype.next = ARC4next;\r\n\r\n    // Plug in your RNG constructor here\r\n    function prng_newstate() {\r\n      return new Arcfour();\r\n    }\r\n\r\n    // Pool size must be a multiple of 4 and greater than 32.\r\n    // An array of bytes the size of the pool will be passed to init()\r\n    var rng_psize = 256;\r\n\r\n    if (typeof exports !== 'undefined') {\r\n        exports = module.exports = {\r\n            default: BigInteger,\r\n            BigInteger: BigInteger,\r\n            SecureRandom: SecureRandom,\r\n        };\r\n    } else {\r\n        this.jsbn = {\r\n          BigInteger: BigInteger,\r\n          SecureRandom: SecureRandom\r\n        };\r\n    }\r\n\r\n}).call(this);\r\n"]}